class Node {
  int val;
  boolean visited = false;
  Node[] adj;
  Node(int val) {
    this.val = val;
  }
}

class Solution {
  private static int uniquePaths(Node s, Node f) {
    int count = 0;
    if (s == f) return count;
    if (s != null && f != null) {
      s.visited = true;
      for (int i = 0; i < s.adj.length; i++) {
        if (s.adj[i] == f) {
          return 1;
        } else if (s.adj[i].visited == false) {
          count += uniquePaths(s.adj[i], f);
        }
      }
    }
    return count;
  }
    
  public static void main(String[] args) {
    Node n1 = new Node(1);
    Node n2 = new Node(2);
    Node n3 = new Node(3);
    Node n4 = new Node(4);
    Node n5 = new Node(5);
    Node n6 = new Node(6);
    Node n7 = new Node(7);
    Node n8 = new Node(8);
  
    n1.adj = new Node[] {n2, n3, n5};
    n2.adj = new Node[] {n1, n4, n7, n8};
    n3.adj = new Node[] {n1, n4};
    n4.adj = new Node[] {n2, n3, n5};
    n5.adj = new Node[] {n1, n4, n6, n8};
    n6.adj = new Node[] {n5, n7};
    n7.adj = new Node[] {n2, n6};
    n8.adj = new Node[] {n2, n5};
  
    System.out.println(uniquePaths(n1, n4));
  }
}
